-- This file is autogenerated. Do not edit this file manually. Your changes will be ignored.
-- More information: https://github.com/MWSE/MWSE/tree/master/docs

--- @meta
--- The MCM library provides a set of objects to make creating mod configurations as easy as possible.
--- 
--- In addition, many MCM components implement useful UI structures that can be used outside the MCMs. These are documented here. For example, you can use [`mwse.mcm.createSlider(someMenu, {...})`](../apis/mwse.mcm.md#mwsemcmcreateslider) to use labeled sliders from the MCM in your custom menu. Be warned, however, that MCM components require the parent element to have the correct formatting to appear. They tend to work best with menus that utilize `widthProportional` and `autoHeight`.
--- @class mwse.mcmlib
mwse.mcm = {}

--- Creates a new ActiveInfo inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, ActiveInfo's UI element tree won't be created. To do so, use ActiveInfo's `create` method:
--- 
--- ```lua
--- local myActiveInfo = mwse.mcm.createActiveInfo({ ... })
--- myActiveInfo:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createActiveInfo.data|string The UI element inside which the new ActiveInfo will be created.
--- @param data string|mwse.mcm.createActiveInfo.data|nil This table accepts the following values:
--- 
--- `label`: string? — *Optional*. The ActiveInfo's label.
--- 
--- `text`: string? — *Optional*. The ActiveInfo's text.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil — *Optional*. A variable for this setting.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. No description yet available.
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMActiveInfo) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMActiveInfo info No description yet available.
function mwse.mcm.createActiveInfo(parent, data) end

---Table parameter definitions for `mwse.mcm.createActiveInfo`.
--- @class mwse.mcm.createActiveInfo.data
--- @field label string? *Optional*. The ActiveInfo's label.
--- @field text string? *Optional*. The ActiveInfo's text.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil *Optional*. A variable for this setting.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field inGameOnly boolean? *Default*: `false`. No description yet available.
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMActiveInfo) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new Button inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, Button's UI element tree won't be created. To do so, use Button's `create` method:
--- 
--- ```lua
--- local myButton = mwse.mcm.createButton({ ... })
--- myButton:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createButton.data The UI element inside which the new Button will be created.
--- @param data mwse.mcm.createButton.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown next to the button.
--- 
--- `buttonText `: string? — *Optional*. Text shown inside the button.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `leftSide `: boolean? — *Default*: `true`. If true, the button will be created on the left and label on the right.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil — *Optional*. A variable for this Button.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `callback`: nil|fun(self: mwseMCMButton) — *Optional*. The custom function called when the player interacts with this Button.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMButton) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMButton|mwseMCMKeyBinder|mwseMCMOnOffButton|mwseMCMYesNoButton button No description yet available.
function mwse.mcm.createButton(parent, data) end

---Table parameter definitions for `mwse.mcm.createButton`.
--- @class mwse.mcm.createButton.data
--- @field label string? *Optional*. Text shown next to the button.
--- @field buttonText  string? *Optional*. Text shown inside the button.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field leftSide  boolean? *Default*: `true`. If true, the button will be created on the left and label on the right.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil *Optional*. A variable for this Button.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field callback nil|fun(self: mwseMCMButton) *Optional*. The custom function called when the player interacts with this Button.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMButton) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new ConfigVariable.
--- @param variable mwse.mcm.createConfigVariable.variable This table accepts the following values:
--- 
--- `id`: string — Key in the config file used to store the variable.
--- 
--- `path`: string — Location of the config file relative to Data `Files/MWSE/config/`.
--- 
--- `defaultSetting`: unknown? — *Optional*. If there is no value stored by the `id` key in the config file, it will be initialized to this value.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- 
--- `numbersOnly`: boolean? — *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- 
--- `converter`: nil|fun(newValue): unknown — *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.
--- @return mwseMCMConfigVariable variable No description yet available.
function mwse.mcm.createConfigVariable(variable) end

---Table parameter definitions for `mwse.mcm.createConfigVariable`.
--- @class mwse.mcm.createConfigVariable.variable
--- @field id string Key in the config file used to store the variable.
--- @field path string Location of the config file relative to Data `Files/MWSE/config/`.
--- @field defaultSetting unknown? *Optional*. If there is no value stored by the `id` key in the config file, it will be initialized to this value.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- @field numbersOnly boolean? *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- @field restartRequired boolean? *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- @field converter nil|fun(newValue): unknown *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.

--- Creates a new Custom variable.
--- @param variable mwse.mcm.createCustom.variable This table accepts the following values:
--- 
--- `id`: string? — *Optional*. The unique identifier for the variable.
--- 
--- `getter`: fun(self: mwseMCMCustomVariable): unknown — The custom getter function.
--- 
--- `setter`: fun(self: mwseMCMCustomVariable, newValue: unknown) — The custom setter function.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- 
--- `numbersOnly`: boolean? — *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- 
--- `converter`: nil|fun(newValue): unknown — *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.
--- @return mwseMCMCustomVariable variable No description yet available.
function mwse.mcm.createCustom(variable) end

---Table parameter definitions for `mwse.mcm.createCustom`.
--- @class mwse.mcm.createCustom.variable
--- @field id string? *Optional*. The unique identifier for the variable.
--- @field getter fun(self: mwseMCMCustomVariable): unknown The custom getter function.
--- @field setter fun(self: mwseMCMCustomVariable, newValue: unknown) The custom setter function.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- @field numbersOnly boolean? *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- @field restartRequired boolean? *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- @field converter nil|fun(newValue): unknown *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.

--- Creates a new mwseMCMCycleButton inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, cycle button's UI element tree won't be created. To do so, use cycle button's `create` method:
--- 
--- ```lua
--- local myButton = mwse.mcm.createCycleButton({ ... })
--- myButton:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createCycleButton.data The UI element inside which the new cycle button will be created.
--- @param data mwse.mcm.createCycleButton.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown next to the button.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `options`: mwseMCMDropdownOption[] — This table holds the text and variable value for each of the cycle button's options.
--- 
--- `leftSide `: boolean? — *Default*: `true`. If true, the button will be created on the left and label on the right.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable for this cycle button.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `callback`: nil|fun(self: mwseMCMCycleButton) — *Optional*. The custom function called when the player interacts with this cycle button.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMCycleButton) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMCycleButton button No description yet available.
function mwse.mcm.createCycleButton(parent, data) end

---Table parameter definitions for `mwse.mcm.createCycleButton`.
--- @class mwse.mcm.createCycleButton.data
--- @field label string? *Optional*. Text shown next to the button.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field options mwseMCMDropdownOption[] This table holds the text and variable value for each of the cycle button's options.
--- @field leftSide  boolean? *Default*: `true`. If true, the button will be created on the left and label on the right.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable for this cycle button.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field callback nil|fun(self: mwseMCMCycleButton) *Optional*. The custom function called when the player interacts with this cycle button.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMCycleButton) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new DecimalSlider inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, DecimalSlider's UI element tree won't be created. To do so, use DecimalSlider's `create` method:
--- 
--- ```lua
--- local mySlider = mwse.mcm.createDecimalSlider({ ... })
--- mySlider:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createDecimalSlider.data The UI element inside which the new DecimalSlider will be created.
--- @param data mwse.mcm.createDecimalSlider.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown above the slider. If left as a normal string, it will be shown in the form: [`label`]: [`self.variable.value`]. If the string contains a '%s' format operator, the value will be formatted into it.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable for this setting.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `min`: number? — *Default*: `0`. Minimum value of slider.
--- 
--- `max`: number? — *Default*: `1`. Maximum value of slider.
--- 
--- `step`: number? — *Default*: `0.01`. How far the slider moves when you press the arrows.
--- 
--- `jump`: number? — *Default*: `0.05`. How far the slider jumps when you click an area inside the slider.
--- 
--- `decimalPlaces`: integer? — *Default*: `2`. The number of decimal places of precision. Must be a positive integer.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `callback`: nil|fun(self: mwseMCMDecimalSlider) — *Optional*. The custom function called when the player interacts with this Setting.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMDecimalSlider) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMDecimalSlider slider No description yet available.
function mwse.mcm.createDecimalSlider(parent, data) end

---Table parameter definitions for `mwse.mcm.createDecimalSlider`.
--- @class mwse.mcm.createDecimalSlider.data
--- @field label string? *Optional*. Text shown above the slider. If left as a normal string, it will be shown in the form: [`label`]: [`self.variable.value`]. If the string contains a '%s' format operator, the value will be formatted into it.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable for this setting.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field min number? *Default*: `0`. Minimum value of slider.
--- @field max number? *Default*: `1`. Maximum value of slider.
--- @field step number? *Default*: `0.01`. How far the slider moves when you press the arrows.
--- @field jump number? *Default*: `0.05`. How far the slider jumps when you click an area inside the slider.
--- @field decimalPlaces integer? *Default*: `2`. The number of decimal places of precision. Must be a positive integer.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field callback nil|fun(self: mwseMCMDecimalSlider) *Optional*. The custom function called when the player interacts with this Setting.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMDecimalSlider) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new Dropdown inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, Dropdown's UI element tree won't be created. To do so, use Dropdown's `create` method:
--- 
--- ```lua
--- local myDropdown = mwse.mcm.createDropdown({ ... })
--- myDropdown:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createDropdown.data The UI element inside which the new Dropdown will be created.
--- @param data mwse.mcm.createDropdown.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. The text shown above the dropdown.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `options`: mwseMCMDropdownOption[] — This table holds the text and variable value for each of the dropdown's options.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable for this setting.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `idleColor`: number[]? — *Default*: `tes3ui.getPalette(tes3.palette.normalColor)`. The idle color for dropdown. Needs to be an RGB trio in the range [0.0, 1.0].
--- 
--- `overColor`: number[]? — *Default*: `tes3ui.getPalette(tes3.palette.normalOverColor)`. The color used when the mouse if hovering over the dropdown. Needs to be an RGB trio in the range [0.0, 1.0].
--- 
--- `pressedColor`: number[]? — *Default*: `tes3ui.getPalette(tes3.palette.normalPressedColor)`. The color used when the dropdown is being pressed. Needs to be an RGB trio in the range [0.0, 1.0].
--- 
--- `callback`: nil|fun(self: mwseMCMDropdown) — *Optional*. The custom function called when the player interacts with this Setting.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMDropdown) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMDropdown dropdown No description yet available.
function mwse.mcm.createDropdown(parent, data) end

---Table parameter definitions for `mwse.mcm.createDropdown`.
--- @class mwse.mcm.createDropdown.data
--- @field label string? *Optional*. The text shown above the dropdown.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field options mwseMCMDropdownOption[] This table holds the text and variable value for each of the dropdown's options.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable for this setting.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field idleColor number[]? *Default*: `tes3ui.getPalette(tes3.palette.normalColor)`. The idle color for dropdown. Needs to be an RGB trio in the range [0.0, 1.0].
--- @field overColor number[]? *Default*: `tes3ui.getPalette(tes3.palette.normalOverColor)`. The color used when the mouse if hovering over the dropdown. Needs to be an RGB trio in the range [0.0, 1.0].
--- @field pressedColor number[]? *Default*: `tes3ui.getPalette(tes3.palette.normalPressedColor)`. The color used when the dropdown is being pressed. Needs to be an RGB trio in the range [0.0, 1.0].
--- @field callback nil|fun(self: mwseMCMDropdown) *Optional*. The custom function called when the player interacts with this Setting.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMDropdown) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new mwseMCMGlobal variable.
--- @param variable string|mwse.mcm.createGlobal.variable This table accepts the following values:
--- 
--- `id`: string — The id of the Morrowind Global.
--- 
--- `numbersOnly`: boolean? — *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- 
--- `converter`: nil|fun(newValue): unknown — *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.
--- @return mwseMCMGlobal|mwseMCMGlobalBoolean variable No description yet available.
function mwse.mcm.createGlobal(variable) end

---Table parameter definitions for `mwse.mcm.createGlobal`.
--- @class mwse.mcm.createGlobal.variable
--- @field id string The id of the Morrowind Global.
--- @field numbersOnly boolean? *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- @field converter nil|fun(newValue): unknown *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.

--- Creates a new GlobalBoolean variable.
--- @param variable string|mwse.mcm.createGlobalBoolean.variable This table accepts the following values:
--- 
--- `id`: string — The id of the Morrowind Global.
--- @return mwseMCMGlobalBoolean variable No description yet available.
function mwse.mcm.createGlobalBoolean(variable) end

---Table parameter definitions for `mwse.mcm.createGlobalBoolean`.
--- @class mwse.mcm.createGlobalBoolean.variable
--- @field id string The id of the Morrowind Global.

--- Creates a new Hyperlink inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, Hyperlink's UI element tree won't be created. To do so, use Hyperlink's `create` method:
--- 
--- ```lua
--- local myHyperlink = mwse.mcm.createHyperlink({ ... })
--- myHyperlink:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createHyperlink.data The UI element inside which the new Hyperlink will be created.
--- @param data mwse.mcm.createHyperlink.data? This table accepts the following values:
--- 
--- `text`: string — The Hyperlink's text.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `url`: string — The URL for this hyperlink.
--- 
--- `label`: string? — *Optional*. The Hyperlink's label. Shown above the Hyperlink's text.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. No description yet available.
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMHyperlink) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMHyperlink hyperlink No description yet available.
function mwse.mcm.createHyperlink(parent, data) end

---Table parameter definitions for `mwse.mcm.createHyperlink`.
--- @class mwse.mcm.createHyperlink.data
--- @field text string The Hyperlink's text.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field url string The URL for this hyperlink.
--- @field label string? *Optional*. The Hyperlink's label. Shown above the Hyperlink's text.
--- @field inGameOnly boolean? *Default*: `false`. No description yet available.
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMHyperlink) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new Info inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, Info's UI element tree won't be created. To do so, use Info's `create` method:
--- 
--- ```lua
--- local myInfo = mwse.mcm.createInfo({ ... })
--- myInfo:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createInfo.data|string The UI element inside which the new Info will be created.
--- @param data string|mwse.mcm.createInfo.data|nil This table accepts the following values:
--- 
--- `label`: string? — *Optional*. The Info's label.
--- 
--- `text`: string? — *Optional*. The Info's text.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil — *Optional*. A variable for this setting.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. No description yet available.
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMInfo) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMActiveInfo|mwseMCMHyperlink|mwseMCMInfo|mwseMCMMouseOverInfo info No description yet available.
function mwse.mcm.createInfo(parent, data) end

---Table parameter definitions for `mwse.mcm.createInfo`.
--- @class mwse.mcm.createInfo.data
--- @field label string? *Optional*. The Info's label.
--- @field text string? *Optional*. The Info's text.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil *Optional*. A variable for this setting.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field inGameOnly boolean? *Default*: `false`. No description yet available.
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMInfo) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new KeyBinder inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, KeyBinder's UI element tree won't be created. To do so, use KeyBinder's `create` method:
--- 
--- ```lua
--- local myKeyBinder = mwse.mcm.createKeyBinder({ ... })
--- myKeyBinder:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createKeyBinder.data The UI element inside which the new KeyBinder will be created.
--- @param data mwse.mcm.createKeyBinder.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown next to the button.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `allowCombinations `: boolean? — *Default*: `true`. If true, the keybinder will let the user use modification keys: Shift, Ctrl, and Alt when rebinding.
--- 
--- `allowMouse `: boolean? — *Default*: `false`. If true, the keybinder will let the user use mouse buttons and scroll wheel in this keybinder. In that case the variable will have [mwseKeyMouseCombo](../types/mwseKeyMouseCombo.md) layout, [mwseKeyCombo](../types/mwseKeyCombo.md) otherwise.
--- 
--- `keybindName`: string? — *Optional*. The keybind name. Shown in the popup menu header. This string is formatted into a localized version of "SET %s KEYBIND.". If none is provided the popup has "SET NEW KEYBIND." as header text.
--- 
--- `leftSide `: boolean? — *Default*: `true`. If true, the button will be created on the left and label on the right.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable for this KeyBinder.
--- 
--- `defaultSetting`: mwseKeyCombo|mwseKeyMouseCombo|nil — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `callback`: nil|fun(self: mwseMCMKeyBinder) — *Optional*. The custom function called when the player interacts with this KeyBinder.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMKeyBinder) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMKeyBinder button No description yet available.
function mwse.mcm.createKeyBinder(parent, data) end

---Table parameter definitions for `mwse.mcm.createKeyBinder`.
--- @class mwse.mcm.createKeyBinder.data
--- @field label string? *Optional*. Text shown next to the button.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field allowCombinations  boolean? *Default*: `true`. If true, the keybinder will let the user use modification keys: Shift, Ctrl, and Alt when rebinding.
--- @field allowMouse  boolean? *Default*: `false`. If true, the keybinder will let the user use mouse buttons and scroll wheel in this keybinder. In that case the variable will have [mwseKeyMouseCombo](../types/mwseKeyMouseCombo.md) layout, [mwseKeyCombo](../types/mwseKeyCombo.md) otherwise.
--- @field keybindName string? *Optional*. The keybind name. Shown in the popup menu header. This string is formatted into a localized version of "SET %s KEYBIND.". If none is provided the popup has "SET NEW KEYBIND." as header text.
--- @field leftSide  boolean? *Default*: `true`. If true, the button will be created on the left and label on the right.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable for this KeyBinder.
--- @field defaultSetting mwseKeyCombo|mwseKeyMouseCombo|nil *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field callback nil|fun(self: mwseMCMKeyBinder) *Optional*. The custom function called when the player interacts with this KeyBinder.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMKeyBinder) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new MouseOverInfo inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, MouseOverInfo's UI element tree won't be created. To do so, use MouseOverInfo's `create` method:
--- 
--- ```lua
--- local myMouseOverInfo = mwse.mcm.createMouseOverInfo({ ... })
--- myMouseOverInfo:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createMouseOverInfo.data|string The UI element inside which the new MouseOverInfo will be created.
--- @param data string|mwse.mcm.createMouseOverInfo.data|nil This table accepts the following values:
--- 
--- `label`: string? — *Optional*. The MouseOverInfo's label.
--- 
--- `text`: string? — *Optional*. The MouseOverInfo's text.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil — *Optional*. A variable for this setting.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. No description yet available.
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMMouseOverInfo) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMActiveInfo|mwseMCMMouseOverInfo info No description yet available.
function mwse.mcm.createMouseOverInfo(parent, data) end

---Table parameter definitions for `mwse.mcm.createMouseOverInfo`.
--- @class mwse.mcm.createMouseOverInfo.data
--- @field label string? *Optional*. The MouseOverInfo's label.
--- @field text string? *Optional*. The MouseOverInfo's text.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable|nil *Optional*. A variable for this setting.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field inGameOnly boolean? *Default*: `false`. No description yet available.
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMMouseOverInfo) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new OnOffButton inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, OnOffButton's UI element tree won't be created. To do so, use OnOffButton's `create` method:
--- 
--- ```lua
--- local myOnOffButton = mwse.mcm.createOnOffButton({ ... })
--- myOnOffButton:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createOnOffButton.data The UI element inside which the new OnOffButton will be created.
--- @param data mwse.mcm.createOnOffButton.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown next to the button.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `leftSide `: boolean? — *Default*: `true`. If true, the button will be created on the left and label on the right.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable of given class for this Button.
--- 
--- `defaultSetting`: boolean? — *Default*: `false`. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `callback`: nil|fun(self: mwseMCMOnOffButton) — *Optional*. The custom function called when the player interacts with this Button.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMOnOffButton) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMOnOffButton button No description yet available.
function mwse.mcm.createOnOffButton(parent, data) end

---Table parameter definitions for `mwse.mcm.createOnOffButton`.
--- @class mwse.mcm.createOnOffButton.data
--- @field label string? *Optional*. Text shown next to the button.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field leftSide  boolean? *Default*: `true`. If true, the button will be created on the left and label on the right.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable of given class for this Button.
--- @field defaultSetting boolean? *Default*: `false`. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field callback nil|fun(self: mwseMCMOnOffButton) *Optional*. The custom function called when the player interacts with this Button.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMOnOffButton) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new ParagraphField inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, ParagraphField's UI element tree won't be created. To do so, use ParagraphField's `create` method:
--- 
--- ```lua
--- local myParagraphField = mwse.mcm.createParagraphField({ ... })
--- myParagraphField:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createParagraphField.data The UI element inside which the new ParagraphField will be created.
--- @param data mwse.mcm.createParagraphField.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown above the text field.
--- 
--- `buttonText`: string? — *Optional*. The text shown on the button next to the input field. The default text is a localized version of: "Submit".
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — Creates a variable of given class for this setting.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `height`: integer? — *Optional*. Fixes the height of the paragraph field to a custom value.
--- 
--- `sNewValue`: string? — *Optional*. The message shown after a new value is submitted. This can be formatted with a '%s' which will be replaced with the new value. The default text is a localized version of: "New value: '%s'".
--- 
--- `sNumbersOnly`: string? — *Optional*. The text shown in a messageBox when the user entered an invalid input when `self.variable.numbersOnly` is true. The default text is a localized version of: "Value must be a number.".
--- 
--- `callback`: nil|fun(self: mwseMCMParagraphField) — *Optional*. This allows overriding the default implementation of this method
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMParagraphField) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMParagraphField paragraphField No description yet available.
function mwse.mcm.createParagraphField(parent, data) end

---Table parameter definitions for `mwse.mcm.createParagraphField`.
--- @class mwse.mcm.createParagraphField.data
--- @field label string? *Optional*. Text shown above the text field.
--- @field buttonText string? *Optional*. The text shown on the button next to the input field. The default text is a localized version of: "Submit".
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable Creates a variable of given class for this setting.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field height integer? *Optional*. Fixes the height of the paragraph field to a custom value.
--- @field sNewValue string? *Optional*. The message shown after a new value is submitted. This can be formatted with a '%s' which will be replaced with the new value. The default text is a localized version of: "New value: '%s'".
--- @field sNumbersOnly string? *Optional*. The text shown in a messageBox when the user entered an invalid input when `self.variable.numbersOnly` is true. The default text is a localized version of: "Value must be a number.".
--- @field callback nil|fun(self: mwseMCMParagraphField) *Optional*. This allows overriding the default implementation of this method
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMParagraphField) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new PlayerData variable.
--- @param variable mwse.mcm.createPlayerData.variable This table accepts the following values:
--- 
--- `id`: string — Key of entry used on the `tes3.player.data` table.
--- 
--- `path`: string — Path to `id` relative to `tes3.player.data`. The subtable keys need to be split by dots. It's best to at least store all your mwseMCMPlayerData fields in a table named after your mod to avoid conflicts.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `id` does not exist in the `tes3.player.data` field, it will be initialized to this value. It's best to initialize this yourself though, as this will not create the value until you've entered the MCM.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- 
--- `converter`: nil|fun(newValue): unknown — *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.
--- @return mwseMCMPlayerData variable No description yet available.
function mwse.mcm.createPlayerData(variable) end

---Table parameter definitions for `mwse.mcm.createPlayerData`.
--- @class mwse.mcm.createPlayerData.variable
--- @field id string Key of entry used on the `tes3.player.data` table.
--- @field path string Path to `id` relative to `tes3.player.data`. The subtable keys need to be split by dots. It's best to at least store all your mwseMCMPlayerData fields in a table named after your mod to avoid conflicts.
--- @field defaultSetting unknown? *Optional*. If `id` does not exist in the `tes3.player.data` field, it will be initialized to this value. It's best to initialize this yourself though, as this will not create the value until you've entered the MCM.
--- @field restartRequired boolean? *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- @field converter nil|fun(newValue): unknown *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.

--- Creates a new Slider inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, Slider's UI element tree won't be created. To do so, use Slider's `create` method:
--- 
--- ```lua
--- local mySlider = mwse.mcm.createSlider({ ... })
--- mySlider:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createSlider.data The UI element inside which the new Slider will be created.
--- @param data mwse.mcm.createSlider.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown above the slider. If left as a normal string, it will be shown in the form: [`label`]: [`self.variable.value`]. If the string contains a '%s' format operator, the value will be formatted into it.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable for this setting.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `min`: integer? — *Default*: `0`. Minimum value of slider.
--- 
--- `max`: integer? — *Default*: `100`. Maximum value of slider.
--- 
--- `step`: integer? — *Default*: `1`. How far the slider moves when you press the arrows.
--- 
--- `jump`: integer? — *Default*: `5`. How far the slider jumps when you click an area inside the slider.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `callback`: nil|fun(self: mwseMCMSlider) — *Optional*. The custom function called when the player interacts with this Setting.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMSlider) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMSlider slider No description yet available.
function mwse.mcm.createSlider(parent, data) end

---Table parameter definitions for `mwse.mcm.createSlider`.
--- @class mwse.mcm.createSlider.data
--- @field label string? *Optional*. Text shown above the slider. If left as a normal string, it will be shown in the form: [`label`]: [`self.variable.value`]. If the string contains a '%s' format operator, the value will be formatted into it.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable for this setting.
--- @field defaultSetting unknown? *Optional*. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field min integer? *Default*: `0`. Minimum value of slider.
--- @field max integer? *Default*: `100`. Maximum value of slider.
--- @field step integer? *Default*: `1`. How far the slider moves when you press the arrows.
--- @field jump integer? *Default*: `5`. How far the slider jumps when you click an area inside the slider.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field callback nil|fun(self: mwseMCMSlider) *Optional*. The custom function called when the player interacts with this Setting.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMSlider) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new TableVariable.
--- @param variable mwse.mcm.createTableVariable.variable This table accepts the following values:
--- 
--- `id`: string — Key in the config file used to store the variable.
--- 
--- `table`: table — The table to save the data to.
--- 
--- `defaultSetting`: unknown? — *Optional*. If `id` does not exist in the table, it will be initialised to this value.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- 
--- `converter`: nil|fun(newValue): unknown — *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.
--- @return mwseMCMTableVariable variable No description yet available.
function mwse.mcm.createTableVariable(variable) end

---Table parameter definitions for `mwse.mcm.createTableVariable`.
--- @class mwse.mcm.createTableVariable.variable
--- @field id string Key in the config file used to store the variable.
--- @field table table The table to save the data to.
--- @field defaultSetting unknown? *Optional*. If `id` does not exist in the table, it will be initialised to this value.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- @field converter nil|fun(newValue): unknown *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.

--- Creates a new Template.
--- @param data string|mwse.mcm.createTemplate.data This table accepts the following values:
--- 
--- `name`: string? — *Optional*. The name field is the mod name, used to register the MCM, and is displayed in the mod list on the lefthand pane.
--- 
--- `label`: string? — *Optional*. Used in place of `name` if that argument isn't passed. You need to pass at least one of the `name` and `label` arguments. If `headerImagePath` is not passed, a UI element will be created with `label` as text.
--- 
--- `headerImagePath`: string? — *Optional*. Set it to display an image at the top of your menu. Path is relative to `Data Files/`. The image must have power-of-2 dimensions (i.e. 16, 32, 64, 128, 256, 512, 1024, etc.).
--- 
--- `onClose`: nil|fun(modConfigContainer: tes3uiElement) — *Optional*. Set this to a function which will be called when the menu is closed. Useful for saving variables, such as TableVariable.
--- 
--- `onSearch`: nil|fun(searchText: string): boolean — *Optional*. A custom search handler function. This function should return true if this mod Template should show up in search results for given `searchText`.
--- 
--- `pages`: mwseMCMPage.new.data[]? — *Optional*. You can create pages for the template directly here. The entries in the array must specify the class of the page.
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. No description yet available.
--- 
--- `postCreate`: nil|fun(self: mwseMCMTemplate) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMTemplate template No description yet available.
function mwse.mcm.createTemplate(data) end

---Table parameter definitions for `mwse.mcm.createTemplate`.
--- @class mwse.mcm.createTemplate.data
--- @field name string? *Optional*. The name field is the mod name, used to register the MCM, and is displayed in the mod list on the lefthand pane.
--- @field label string? *Optional*. Used in place of `name` if that argument isn't passed. You need to pass at least one of the `name` and `label` arguments. If `headerImagePath` is not passed, a UI element will be created with `label` as text.
--- @field headerImagePath string? *Optional*. Set it to display an image at the top of your menu. Path is relative to `Data Files/`. The image must have power-of-2 dimensions (i.e. 16, 32, 64, 128, 256, 512, 1024, etc.).
--- @field onClose nil|fun(modConfigContainer: tes3uiElement) *Optional*. Set this to a function which will be called when the menu is closed. Useful for saving variables, such as TableVariable.
--- @field onSearch nil|fun(searchText: string): boolean *Optional*. A custom search handler function. This function should return true if this mod Template should show up in search results for given `searchText`.
--- @field pages mwseMCMPage.new.data[]? *Optional*. You can create pages for the template directly here. The entries in the array must specify the class of the page.
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field inGameOnly boolean? *Default*: `false`. No description yet available.
--- @field postCreate nil|fun(self: mwseMCMTemplate) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new TextField inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, TextField's UI element tree won't be created. To do so, use TextField's `create` method:
--- 
--- ```lua
--- local myTextField = mwse.mcm.createTextField({ ... })
--- myTextField:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createTextField.data The UI element inside which the new TextField will be created.
--- @param data mwse.mcm.createTextField.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown above the text field.
--- 
--- `buttonText`: string? — *Optional*. The text shown on the button next to the input field. The default text is a localized version of: "Submit".
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable for this setting.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `press`: nil|fun(self: mwseMCMTextField) — *Optional*. This allows overriding the default implementation of this method. Can be overriden to add a confirmation message before updating. This function should call `self:update()` at the end.
--- 
--- `sNewValue`: string? — *Optional*. The message shown after a new value is submitted. This can be formatted with a '%s' which will be replaced with the new value. The default text is a localized version of: "New value: '%s'".
--- 
--- `sNumbersOnly`: string? — *Optional*. The text shown in a messageBox when the user entered an invalid input when `self.variable.numbersOnly` is true. The default text is a localized version of: "Value must be a number.".
--- 
--- `minHeight`: integer? — *Optional*. The minimum height set on the `self.element.border` UI element.
--- 
--- `callback`: nil|fun(self: mwseMCMTextField) — *Optional*. This allows overriding the default implementation of this method. See its [description](../types/mwseMCMTextField.md#callback).
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMTextField) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMParagraphField|mwseMCMTextField textField No description yet available.
function mwse.mcm.createTextField(parent, data) end

---Table parameter definitions for `mwse.mcm.createTextField`.
--- @class mwse.mcm.createTextField.data
--- @field label string? *Optional*. Text shown above the text field.
--- @field buttonText string? *Optional*. The text shown on the button next to the input field. The default text is a localized version of: "Submit".
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable for this setting.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field press nil|fun(self: mwseMCMTextField) *Optional*. This allows overriding the default implementation of this method. Can be overriden to add a confirmation message before updating. This function should call `self:update()` at the end.
--- @field sNewValue string? *Optional*. The message shown after a new value is submitted. This can be formatted with a '%s' which will be replaced with the new value. The default text is a localized version of: "New value: '%s'".
--- @field sNumbersOnly string? *Optional*. The text shown in a messageBox when the user entered an invalid input when `self.variable.numbersOnly` is true. The default text is a localized version of: "Value must be a number.".
--- @field minHeight integer? *Optional*. The minimum height set on the `self.element.border` UI element.
--- @field callback nil|fun(self: mwseMCMTextField) *Optional*. This allows overriding the default implementation of this method. See its [description](../types/mwseMCMTextField.md#callback).
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMTextField) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- Creates a new Variable.
--- @param variable string|mwse.mcm.createVariable.variable|nil This table accepts the following values:
--- 
--- `id`: string? — *Optional*. The unique identifier for the variable.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- 
--- `numbersOnly`: boolean? — *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- 
--- `converter`: nil|fun(newValue): unknown — *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.
--- @return mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable variable No description yet available.
function mwse.mcm.createVariable(variable) end

---Table parameter definitions for `mwse.mcm.createVariable`.
--- @class mwse.mcm.createVariable.variable
--- @field id string? *Optional*. The unique identifier for the variable.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting containing this variable will be disabled if the game is on main menu.
--- @field numbersOnly boolean? *Default*: `false`. If true, only numbers will be allowed for this variable in TextFields.
--- @field restartRequired boolean? *Default*: `false`. If true, updating the setting containing this variable will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*.  The default text is a localized version of: "The game must be restarted before this change will come into effect.".
--- @field converter nil|fun(newValue): unknown *Optional*. This function is called when the value of the variable is changed. The function can modify the new value before it is saved.

--- Creates a new YesNoButton inside given `parent` menu.
--- 
--- The canonical way to use this function is to pass a `parent` and `data` arguments. If passing only `data` table, YesNoButton's UI element tree won't be created. To do so, use YesNoButton's `create` method:
--- 
--- ```lua
--- local myYesNoButton = mwse.mcm.createYesNoButton({ ... })
--- myYesNoButton:create(parent)
--- ```
--- 
--- The same is done by this function if you pass both `parent` and `data` arguments.
--- 
--- @param parent tes3uiElement|mwse.mcm.createYesNoButton.data The UI element inside which the new YesNoButton will be created.
--- @param data mwse.mcm.createYesNoButton.data? This table accepts the following values:
--- 
--- `label`: string? — *Optional*. Text shown next to the button.
--- 
--- `description`: string? — *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- 
--- `leftSide `: boolean? — *Default*: `true`. If true, the button will be created on the left and label on the right.
--- 
--- `variable`: mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable — A variable for this Button.
--- 
--- `defaultSetting`: boolean? — *Default*: `false`. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- 
--- `callback`: nil|fun(self: mwseMCMYesNoButton) — *Optional*. The custom function called when the player interacts with this Button.
--- 
--- `inGameOnly`: boolean? — *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- 
--- `restartRequired`: boolean? — *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- 
--- `restartRequiredMessage`: string? — *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- 
--- `indent`: integer? — *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- 
--- `childIndent`: integer? — *Optional*. The left padding size in pixels. Used on all the child components.
--- 
--- `paddingBottom`: integer? — *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- 
--- `childSpacing`: integer? — *Optional*. The bottom border size in pixels. Used on all the child components.
--- 
--- `postCreate`: nil|fun(self: mwseMCMYesNoButton) — *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.
--- @return mwseMCMYesNoButton button No description yet available.
function mwse.mcm.createYesNoButton(parent, data) end

---Table parameter definitions for `mwse.mcm.createYesNoButton`.
--- @class mwse.mcm.createYesNoButton.data
--- @field label string? *Optional*. Text shown next to the button.
--- @field description string? *Optional*. If in a [Sidebar Page](../types/mwseMCMSideBarPage.md), the description will be shown on mouseover.
--- @field leftSide  boolean? *Default*: `true`. If true, the button will be created on the left and label on the right.
--- @field variable mwseMCMConfigVariable|mwseMCMCustomVariable|mwseMCMGlobal|mwseMCMGlobalBoolean|mwseMCMPlayerData|mwseMCMTableVariable|mwseMCMVariable|mwseMCMSettingNewVariable A variable for this Button.
--- @field defaultSetting boolean? *Default*: `false`. If `defaultSetting` wasn't passed in the `variable` table, can be passed here. The new variable will be initialized to this value.
--- @field callback nil|fun(self: mwseMCMYesNoButton) *Optional*. The custom function called when the player interacts with this Button.
--- @field inGameOnly boolean? *Default*: `false`. If true, the setting is disabled while the game is on main menu.
--- @field restartRequired boolean? *Default*: `false`. If true, updating this Setting will notify the player to restart the game.
--- @field restartRequiredMessage string? *Optional*. The message shown if restartRequired is triggered. The default text is a localized version of: "The game must be restarted before this change will come into effect."
--- @field indent integer? *Default*: `12`. The left padding size in pixels. Only used if the `childIndent` isn't set on the parent component.
--- @field childIndent integer? *Optional*. The left padding size in pixels. Used on all the child components.
--- @field paddingBottom integer? *Default*: `4`. The bottom border size in pixels. Only used if the `childSpacing` is unset on the parent component.
--- @field childSpacing integer? *Optional*. The bottom border size in pixels. Used on all the child components.
--- @field postCreate nil|fun(self: mwseMCMYesNoButton) *Optional*. Can define a custom formatting function to make adjustments to any element saved in `self.elements`.

--- A convenience function that registers the mod's configuration menu using its mwseMCMTemplate.
--- 
--- You don't need to call `mwse.registerModConfig` if calling this function.
--- @param template mwseMCMTemplate No description yet available.
function mwse.mcm.register(template) end

--- The function registers the provided template to the Mod Config Menu.
--- @deprecated
--- @param template table No description yet available.
function mwse.mcm.registerMCM(template) end

--- This function check whether a certain key combination is currently pressed. It will only check ctrl, shift and alt modifier keys, matching the KeyBinder. It doesn't check mouse.
--- @param keybind mwseKeyCombo|mwseKeyMouseCombo No description yet available.
--- @return boolean pressed No description yet available.
function mwse.mcm.testKeyBind(keybind) end

